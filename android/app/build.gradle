apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
//apply plugin: "com.google.protobuf"
apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.crashlytics"
apply plugin: "androidx.navigation.safeargs"


def enableSeparateBuildPerCPUArchitecture = true
/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.android["compileSdkVersion"]

    namespace "com.rate.quiz"
    defaultConfig {
        applicationId "com.rate.quiz"
        minSdk rootProject.ext.android["minSdkVersion"]
        targetSdk rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["appVersionCode"]
        versionName rootProject.ext.android["appVersionName"]
        buildConfigField("boolean", "isGooglePlay", "${rootProject.ext.appBuild['isGooglePlay']}")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        viewBinding {
            enabled true
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    signingConfigs {
        release {
            storeFile file('release.keystore')
            storePassword 'hash2023'
            keyAlias 'hash'
            keyPassword 'hash2023'
        }
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        release {
            minifyEnabled rootProject.ext.appBuild["minifyEnabled"]
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
        }

        //自定义输出配置
        android.applicationVariants.all {
            variant ->
                variant.outputs.all {output->
                    def architecture = output.getFilter(com.android.build.OutputFile.ABI)
                    if (variant.buildType.name == 'debug') {
                        outputFileName = "Ratequiz_debug_${architecture}_${defaultConfig.versionName}.apk"
                    } else {
                        outputFileName = "Ratequiz_release_${architecture}_${defaultConfig.versionName}.apk"
                    }
                }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            java {
                srcDirs 'src/main/java'
            }
//            proto {
//                srcDirs 'src/main/proto/' //指定.proto文件路径
//                include '**/*.proto'  //find it
//            }
        }
    }

    splits {
        abi {
            enable true
            reset()
//            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "x86_64", "arm64-v8a"
        }
    }

//    protobuf {
//        protoc { // 也可以配置本地编译器路径
//            artifact = 'com.google.protobuf:protoc:3.21.12'
//        }
//        plugins {
//            javalite {
//                // The codegen for lite comes as a separate artifact
//                artifact = 'com.google.protobuf:protobuf-java:3.21.12'
//            }
//        }
//        //这里配置生成目录，编译后会在build的目录下生成对应的java文件和C文件
//        generateProtoTasks {
//            all().each { task ->
//                task.builtins {
//                    // In most cases you don't need the full Java output
//                    // if you use the lite output.
//                    remove java
//                }
//                task.builtins {
//                    java {
//                        option 'lite'
//                    } //java文件
//                }
//            }
//        }
//    }
}

repositories {
    google()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'com.github.duxl:AndroidQuicklib:v1.0.0_bate6.3.3'

    // annotationProcessor 在每个module中都必须配置才起作用
//    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    // 侧滑菜单
//    implementation 'com.github.mcxtzhang:SwipeDelMenuLayout:V1.3.0'
    // 圆角控件
    implementation 'com.github.duxl:FlycoRoundView:v2.1.1'
    // ViewPagerIndicator
    implementation 'com.shizhefei:ViewPagerIndicator:1.1.9'
    // 侧滑控件
    def smart_swipe_version = "1.1.0"
    implementation "com.billy.android:smart-swipe:$smart_swipe_version"
    implementation "com.billy.android:smart-swipe-x:$smart_swipe_version"
    implementation "com.gongwen:swipeback:1.0.2"
    // 消息事件
    implementation 'io.github.jeremyliao:live-event-bus-x:1.8.0'
    // 图表
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    // protobuf
    implementation 'com.google.protobuf:protobuf-java:3.21.12'
    implementation 'com.google.protobuf:protoc:3.21.12'
    implementation 'com.google.protobuf:protobuf-java-util:3.19.2'
    // websocket
    implementation 'com.github.0xZhangKe:WebSocketDemo:3.1'
    //
    implementation 'jp.wasabeef:glide-transformations:4.0.1'

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:31.1.1')
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

    def room_version = "2.5.0"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    def nav_version = "2.5.3"
    // Java language implementation
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"

    //appsflyer
    implementation 'com.appsflyer:af-android-sdk:6.9.0'
    //Google Play Install Referrer for appsflyer
    implementation "com.android.installreferrer:installreferrer:2.2"
    implementation 'com.guolindev.permissionx:permissionx:1.7.1'

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.11'
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
