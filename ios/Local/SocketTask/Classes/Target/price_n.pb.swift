// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: price_n.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct CommandHead {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetQuotationStopRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetQuotationStopResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetCurrencyTokensListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  ///语言
  public var lang: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetCurrencyTokensRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  ///语言
  public var lang: String = String()

  public var token: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 货币类型
public struct GetCurrencyTokensResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  ///货币代码
  public var token: String = String()

  ///货币类型代码: 法币currency、虚拟货币 digital，期货, futures
  public var currencyType: String = String()

  ///货币名称
  public var name: String = String()

  ///icon
  public var icon: String = String()

  ///货币单位
  public var unitName: String = String()

  ///价格
  public var usdAmount: String = String()

  ///货币基本单位10的平方
  public var baseUnit: Int32 = 0

  ///更新日期
  public var updateDate: String = String()

  public var price: String = String()

  public var countryCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetCurrencyTokensListMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///字母
  public var fchat: String = String()

  public var data: [GetCurrencyTokensResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetCurrencyTokensListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  public var data: [GetCurrencyTokensListMap] = []

  ///更新日期
  public var updateDate: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetQuotationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  ///语言
  public var lang: String = String()

  ///货币 cny
  public var tokenFrom: String = String()

  ///到 usd
  public var tokenTo: String = String()

  ///日期单位： 天: 24h，周: 7D，1月: 1M, 6月: 6M, 1年 1Y, 3年: 3Y
  public var dateUnit: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct QutationBaseData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var priceFrom: String = String()

  public var priceTo: String = String()

  ///2022-08-09 32:10:10  103 list(d, d, n, d)
  public var priceDate: String = String()

  public var priceTime: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetQuotationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  public var tokenFrom: String = String()

  public var tokenTo: String = String()

  public var dateUnit: String = String()

  public var amount: String = String()

  public var data: [QutationBaseData] = []

  ///当前价格
  public var priceFrom: String = String()

  public var priceTo: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetSymbolsRateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  ///语言
  public var lang: String = String()

  ///"cny(usd,ero, btc,aud),usd(cny,ero, btc,aud),ero(cny,ero, btc,aud),btc(cny,ero, btc,aud),aud(cny,ero, btc,aud)"
  public var tokens: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct RateBaseData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: String = String()

  public var price: String = String()

  public var price1: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetSymbolsRateItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var token: String = String()

  /// 定义Map对象
  public var data: Dictionary<String,RateBaseData> = [:]

  public var price: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetSymbolsRateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  /// 定义Map对象
  public var data: Dictionary<String,GetSymbolsRateItem> = [:]

  ///更新日期
  public var updateDate: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetCurrentCurrencyTokensRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  ///语言
  public var lang: String = String()

  ///数量, =0默认5个
  public var count: Int32 = 0

  ///国家名称
  public var location: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetCurrentCurrencyTokensResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  public var data: [GetCurrencyTokensResponse] = []

  ///更新日期
  public var updateDate: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetCurrencyTokenItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///货币代码
  public var token: String = String()

  ///货币类型代码: 法币currency、虚拟货币 digital，期货, futures
  public var currencyType: String = String()

  ///货币名称
  public var name: String = String()

  ///icon
  public var icon: String = String()

  ///货币单位
  public var unitName: String = String()

  ///国家代码
  public var countryCode: String = String()

  /// 定义Map对象
  public var data: Dictionary<String,RateBaseData> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetDefaultCurrencyTokensListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct GetDefaultCurrencyTokensListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///命令名称
  public var cmd: Int32 = 0

  public var cid: String = String()

  ///数量
  public var data: [GetCurrencyTokenItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension CommandHead: @unchecked Sendable {}
extension GetQuotationStopRequest: @unchecked Sendable {}
extension GetQuotationStopResponse: @unchecked Sendable {}
extension GetCurrencyTokensListRequest: @unchecked Sendable {}
extension GetCurrencyTokensRequest: @unchecked Sendable {}
extension GetCurrencyTokensResponse: @unchecked Sendable {}
extension GetCurrencyTokensListMap: @unchecked Sendable {}
extension GetCurrencyTokensListResponse: @unchecked Sendable {}
extension GetQuotationRequest: @unchecked Sendable {}
extension QutationBaseData: @unchecked Sendable {}
extension GetQuotationResponse: @unchecked Sendable {}
extension GetSymbolsRateRequest: @unchecked Sendable {}
extension RateBaseData: @unchecked Sendable {}
extension GetSymbolsRateItem: @unchecked Sendable {}
extension GetSymbolsRateResponse: @unchecked Sendable {}
extension GetCurrentCurrencyTokensRequest: @unchecked Sendable {}
extension GetCurrentCurrencyTokensResponse: @unchecked Sendable {}
extension GetCurrencyTokenItem: @unchecked Sendable {}
extension GetDefaultCurrencyTokensListRequest: @unchecked Sendable {}
extension GetDefaultCurrencyTokensListResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CommandHead: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CommandHead"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandHead, rhs: CommandHead) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetQuotationStopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetQuotationStopRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetQuotationStopRequest, rhs: GetQuotationStopRequest) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetQuotationStopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetQuotationStopResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetQuotationStopResponse, rhs: GetQuotationStopResponse) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetCurrencyTokensListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetCurrencyTokensListRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
    3: .same(proto: "lang"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lang) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.lang.isEmpty {
      try visitor.visitSingularStringField(value: self.lang, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetCurrencyTokensListRequest, rhs: GetCurrencyTokensListRequest) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.lang != rhs.lang {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetCurrencyTokensRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetCurrencyTokensRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
    3: .same(proto: "lang"),
    4: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lang) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.lang.isEmpty {
      try visitor.visitSingularStringField(value: self.lang, fieldNumber: 3)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetCurrencyTokensRequest, rhs: GetCurrencyTokensRequest) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.lang != rhs.lang {return false}
    if lhs.token != rhs.token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetCurrencyTokensResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetCurrencyTokensResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
    3: .same(proto: "token"),
    4: .same(proto: "currencyType"),
    5: .same(proto: "name"),
    6: .same(proto: "icon"),
    7: .same(proto: "unitName"),
    8: .standard(proto: "usd_amount"),
    9: .standard(proto: "base_unit"),
    10: .standard(proto: "update_date"),
    11: .same(proto: "price"),
    12: .same(proto: "countryCode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.currencyType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.unitName) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.usdAmount) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.baseUnit) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.updateDate) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.price) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.countryCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 3)
    }
    if !self.currencyType.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyType, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 6)
    }
    if !self.unitName.isEmpty {
      try visitor.visitSingularStringField(value: self.unitName, fieldNumber: 7)
    }
    if !self.usdAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.usdAmount, fieldNumber: 8)
    }
    if self.baseUnit != 0 {
      try visitor.visitSingularInt32Field(value: self.baseUnit, fieldNumber: 9)
    }
    if !self.updateDate.isEmpty {
      try visitor.visitSingularStringField(value: self.updateDate, fieldNumber: 10)
    }
    if !self.price.isEmpty {
      try visitor.visitSingularStringField(value: self.price, fieldNumber: 11)
    }
    if !self.countryCode.isEmpty {
      try visitor.visitSingularStringField(value: self.countryCode, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetCurrencyTokensResponse, rhs: GetCurrencyTokensResponse) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.token != rhs.token {return false}
    if lhs.currencyType != rhs.currencyType {return false}
    if lhs.name != rhs.name {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unitName != rhs.unitName {return false}
    if lhs.usdAmount != rhs.usdAmount {return false}
    if lhs.baseUnit != rhs.baseUnit {return false}
    if lhs.updateDate != rhs.updateDate {return false}
    if lhs.price != rhs.price {return false}
    if lhs.countryCode != rhs.countryCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetCurrencyTokensListMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetCurrencyTokensListMap"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fchat"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fchat) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fchat.isEmpty {
      try visitor.visitSingularStringField(value: self.fchat, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetCurrencyTokensListMap, rhs: GetCurrencyTokensListMap) -> Bool {
    if lhs.fchat != rhs.fchat {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetCurrencyTokensListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetCurrencyTokensListResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
    3: .same(proto: "data"),
    4: .standard(proto: "update_date"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.updateDate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 3)
    }
    if !self.updateDate.isEmpty {
      try visitor.visitSingularStringField(value: self.updateDate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetCurrencyTokensListResponse, rhs: GetCurrencyTokensListResponse) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.data != rhs.data {return false}
    if lhs.updateDate != rhs.updateDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetQuotationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetQuotationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
    3: .same(proto: "lang"),
    4: .same(proto: "tokenFrom"),
    5: .same(proto: "tokenTo"),
    6: .same(proto: "dateUnit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lang) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenFrom) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.tokenTo) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.dateUnit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.lang.isEmpty {
      try visitor.visitSingularStringField(value: self.lang, fieldNumber: 3)
    }
    if !self.tokenFrom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenFrom, fieldNumber: 4)
    }
    if !self.tokenTo.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenTo, fieldNumber: 5)
    }
    if !self.dateUnit.isEmpty {
      try visitor.visitSingularStringField(value: self.dateUnit, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetQuotationRequest, rhs: GetQuotationRequest) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.lang != rhs.lang {return false}
    if lhs.tokenFrom != rhs.tokenFrom {return false}
    if lhs.tokenTo != rhs.tokenTo {return false}
    if lhs.dateUnit != rhs.dateUnit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension QutationBaseData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "QutationBaseData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "priceFrom"),
    2: .same(proto: "priceTo"),
    3: .standard(proto: "price_date"),
    4: .standard(proto: "price_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.priceFrom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.priceTo) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.priceDate) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.priceTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.priceFrom.isEmpty {
      try visitor.visitSingularStringField(value: self.priceFrom, fieldNumber: 1)
    }
    if !self.priceTo.isEmpty {
      try visitor.visitSingularStringField(value: self.priceTo, fieldNumber: 2)
    }
    if !self.priceDate.isEmpty {
      try visitor.visitSingularStringField(value: self.priceDate, fieldNumber: 3)
    }
    if self.priceTime != 0 {
      try visitor.visitSingularInt64Field(value: self.priceTime, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: QutationBaseData, rhs: QutationBaseData) -> Bool {
    if lhs.priceFrom != rhs.priceFrom {return false}
    if lhs.priceTo != rhs.priceTo {return false}
    if lhs.priceDate != rhs.priceDate {return false}
    if lhs.priceTime != rhs.priceTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetQuotationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetQuotationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
    3: .same(proto: "tokenFrom"),
    4: .same(proto: "tokenTo"),
    5: .same(proto: "dateUnit"),
    6: .same(proto: "amount"),
    7: .same(proto: "data"),
    8: .same(proto: "priceFrom"),
    9: .same(proto: "priceTo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tokenFrom) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenTo) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.dateUnit) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.priceFrom) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.priceTo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.tokenFrom.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenFrom, fieldNumber: 3)
    }
    if !self.tokenTo.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenTo, fieldNumber: 4)
    }
    if !self.dateUnit.isEmpty {
      try visitor.visitSingularStringField(value: self.dateUnit, fieldNumber: 5)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 7)
    }
    if !self.priceFrom.isEmpty {
      try visitor.visitSingularStringField(value: self.priceFrom, fieldNumber: 8)
    }
    if !self.priceTo.isEmpty {
      try visitor.visitSingularStringField(value: self.priceTo, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetQuotationResponse, rhs: GetQuotationResponse) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.tokenFrom != rhs.tokenFrom {return false}
    if lhs.tokenTo != rhs.tokenTo {return false}
    if lhs.dateUnit != rhs.dateUnit {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.data != rhs.data {return false}
    if lhs.priceFrom != rhs.priceFrom {return false}
    if lhs.priceTo != rhs.priceTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetSymbolsRateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetSymbolsRateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
    3: .same(proto: "lang"),
    4: .same(proto: "tokens"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lang) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokens) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.lang.isEmpty {
      try visitor.visitSingularStringField(value: self.lang, fieldNumber: 3)
    }
    if !self.tokens.isEmpty {
      try visitor.visitSingularStringField(value: self.tokens, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetSymbolsRateRequest, rhs: GetSymbolsRateRequest) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.lang != rhs.lang {return false}
    if lhs.tokens != rhs.tokens {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RateBaseData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "RateBaseData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "price"),
    3: .same(proto: "price1"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.price) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.price1) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    if !self.price.isEmpty {
      try visitor.visitSingularStringField(value: self.price, fieldNumber: 2)
    }
    if !self.price1.isEmpty {
      try visitor.visitSingularStringField(value: self.price1, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: RateBaseData, rhs: RateBaseData) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.price != rhs.price {return false}
    if lhs.price1 != rhs.price1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetSymbolsRateItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetSymbolsRateItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "data"),
    3: .same(proto: "price"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,RateBaseData>.self, value: &self.data) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.price) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,RateBaseData>.self, value: self.data, fieldNumber: 2)
    }
    if !self.price.isEmpty {
      try visitor.visitSingularStringField(value: self.price, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetSymbolsRateItem, rhs: GetSymbolsRateItem) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.data != rhs.data {return false}
    if lhs.price != rhs.price {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetSymbolsRateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetSymbolsRateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
    3: .same(proto: "data"),
    4: .standard(proto: "update_date"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GetSymbolsRateItem>.self, value: &self.data) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.updateDate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,GetSymbolsRateItem>.self, value: self.data, fieldNumber: 3)
    }
    if !self.updateDate.isEmpty {
      try visitor.visitSingularStringField(value: self.updateDate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetSymbolsRateResponse, rhs: GetSymbolsRateResponse) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.data != rhs.data {return false}
    if lhs.updateDate != rhs.updateDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetCurrentCurrencyTokensRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetCurrentCurrencyTokensRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
    3: .same(proto: "lang"),
    4: .same(proto: "count"),
    5: .same(proto: "location"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lang) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.location) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.lang.isEmpty {
      try visitor.visitSingularStringField(value: self.lang, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 4)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetCurrentCurrencyTokensRequest, rhs: GetCurrentCurrencyTokensRequest) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.lang != rhs.lang {return false}
    if lhs.count != rhs.count {return false}
    if lhs.location != rhs.location {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetCurrentCurrencyTokensResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetCurrentCurrencyTokensResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
    3: .same(proto: "data"),
    4: .standard(proto: "update_date"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.updateDate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 3)
    }
    if !self.updateDate.isEmpty {
      try visitor.visitSingularStringField(value: self.updateDate, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetCurrentCurrencyTokensResponse, rhs: GetCurrentCurrencyTokensResponse) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.data != rhs.data {return false}
    if lhs.updateDate != rhs.updateDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetCurrencyTokenItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetCurrencyTokenItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "currencyType"),
    3: .same(proto: "name"),
    4: .same(proto: "icon"),
    5: .same(proto: "unitName"),
    6: .same(proto: "countryCode"),
    7: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.currencyType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.icon) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.unitName) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.countryCode) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,RateBaseData>.self, value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    if !self.currencyType.isEmpty {
      try visitor.visitSingularStringField(value: self.currencyType, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.icon.isEmpty {
      try visitor.visitSingularStringField(value: self.icon, fieldNumber: 4)
    }
    if !self.unitName.isEmpty {
      try visitor.visitSingularStringField(value: self.unitName, fieldNumber: 5)
    }
    if !self.countryCode.isEmpty {
      try visitor.visitSingularStringField(value: self.countryCode, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,RateBaseData>.self, value: self.data, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetCurrencyTokenItem, rhs: GetCurrencyTokenItem) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.currencyType != rhs.currencyType {return false}
    if lhs.name != rhs.name {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.unitName != rhs.unitName {return false}
    if lhs.countryCode != rhs.countryCode {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetDefaultCurrencyTokensListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetDefaultCurrencyTokensListRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetDefaultCurrencyTokensListRequest, rhs: GetDefaultCurrencyTokensListRequest) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GetDefaultCurrencyTokensListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "GetDefaultCurrencyTokensListResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cmd"),
    2: .same(proto: "cid"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.cmd) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cid) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cmd != 0 {
      try visitor.visitSingularInt32Field(value: self.cmd, fieldNumber: 1)
    }
    if !self.cid.isEmpty {
      try visitor.visitSingularStringField(value: self.cid, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: GetDefaultCurrencyTokensListResponse, rhs: GetDefaultCurrencyTokensListResponse) -> Bool {
    if lhs.cmd != rhs.cmd {return false}
    if lhs.cid != rhs.cid {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
